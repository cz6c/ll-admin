/**
 * 自动生成类型 - 来自后端 DTO
 * 生成时间: 2025-06-30T08:52:02.108Z
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 任务-创建 */
        post: operations["TaskController_createTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/delete{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 任务-取消 */
        get: operations["TaskController_cancelTask"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nodemailer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 邮箱推送任务-创建 */
        post: operations["PushTaskController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nodemailer/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 邮箱推送任务-列表 */
        get: operations["PushTaskController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nodemailer/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 邮箱推送任务-详情 */
        get: operations["PushTaskController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nodemailer/switchStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 邮箱推送任务-切换状态 */
        post: operations["PushTaskController_switchStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nodemailer/{ids}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 邮箱推送任务-删除 */
        get: operations["PushTaskController_remove"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/common/area/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 通过 code 查area列表 */
        get: operations["AreaController_findAllChildrenByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/common/area/trees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** area trees */
        get: operations["AreaController_findTrees"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/common/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 文件上传 */
        post: operations["UploadController_singleFileUpload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/common/upload/chunk/uploadId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取切片上传任务Id */
        get: operations["UploadController_getChunkUploadId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/common/upload/chunk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 文件切片上传 */
        post: operations["UploadController_chunkFileUpload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/common/upload/chunk/merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 合并切片 */
        post: operations["UploadController_chunkMergeFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/common/upload/chunk/result": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取切片上传结果 */
        get: operations["UploadController_getChunkUploadResult"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/common/upload/cos/authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取cos上传密钥 */
        get: operations["UploadController_getAuthorization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 个人中心-用户信息 */
        get: operations["UserController_profile"];
        put?: never;
        /** 个人中心-修改用户信息 */
        post: operations["UserController_updateProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/profile/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 个人中心-修改用户头像 */
        post: operations["UserController_updateAvatar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/profile/updatePwd": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 个人中心-修改密码 */
        post: operations["UserController_updatePwd"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 用户-创建 */
        post: operations["UserController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 用户-列表 */
        get: operations["UserController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 用户-详情 */
        get: operations["UserController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/changeStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 用户-停用角色 */
        post: operations["UserController_changeStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 用户-更新 */
        post: operations["UserController_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/resetPwd": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 用户-重置密码 */
        post: operations["UserController_resetPwd"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/delete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 用户-删除 */
        get: operations["UserController_remove"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/user/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 导出用户信息数据为xlsx */
        post: operations["UserController_export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/dept/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 部门管理-创建 */
        post: operations["DeptController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/dept/treeSelect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 部门管理-树 */
        get: operations["DeptController_treeSelect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/dept/roleDeptTreeSelect/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 部门管理-角色部门树 */
        get: operations["DeptController_roleDeptTreeSelect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/dept/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 部门管理-详情 */
        get: operations["DeptController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/dept/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 部门管理-更新 */
        post: operations["DeptController_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/dept/delete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 部门管理-删除 */
        get: operations["DeptController_remove"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/menu/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 菜单管理-创建 */
        post: operations["MenuController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/menu/treeSelect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 菜单管理-树 */
        get: operations["MenuController_treeSelect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/menu/roleMenuTreeSelect/{menuId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 菜单管理-角色-树 */
        get: operations["MenuController_roleMenuTreeSelect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/menu/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 菜单管理-详情 */
        get: operations["MenuController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/menu/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 菜单管理-修改 */
        post: operations["MenuController_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/menu/delete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 菜单管理-删除 */
        get: operations["MenuController_remove"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/role/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 角色管理-创建 */
        post: operations["RoleController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/role/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 角色管理-列表 */
        get: operations["RoleController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/role/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 角色管理-详情 */
        get: operations["RoleController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/role/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 角色管理-修改 */
        post: operations["RoleController_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/role/changeStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 角色管理-切换状态 */
        post: operations["RoleController_changeStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/role/delete/{ids}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 角色管理-删除 */
        get: operations["RoleController_remove"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/role/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 导出角色管理xlsx文件 */
        post: operations["RoleController_export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/post/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 岗位管理-创建 */
        post: operations["PostController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/post/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 岗位管理-列表 */
        get: operations["PostController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/post/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 岗位管理-详情 */
        get: operations["PostController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/post/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 岗位管理-更新 */
        post: operations["PostController_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/post/delete/{ids}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 岗位管理-删除 */
        get: operations["PostController_remove"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/post/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 导出岗位管理xlsx文件 */
        post: operations["PostController_export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/config/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 参数设置-创建 */
        post: operations["ConfigController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/config/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 参数设置-列表 */
        get: operations["ConfigController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/config/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 参数设置-详情(id) */
        get: operations["ConfigController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/config/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 参数设置-更新 */
        post: operations["ConfigController_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/config/delete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 参数设置-删除 */
        get: operations["ConfigController_remove"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/config/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 导出参数管理为xlsx文件 */
        post: operations["ConfigController_export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/notice/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 通知公告-创建 */
        post: operations["NoticeController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/notice/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 通知公告-列表 */
        get: operations["NoticeController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/notice/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 通知公告-详情 */
        get: operations["NoticeController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/notice/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 通知公告-更新 */
        post: operations["NoticeController_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/notice/delete/{ids}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 通知公告-删除 */
        get: operations["NoticeController_remove"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 用户登陆 */
        post: operations["MainController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 用户注册 */
        post: operations["MainController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/captchaImage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取验证图片 */
        get: operations["MainController_captchaImage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getLoginUserInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取登录用户信息 */
        get: operations["MainController_getLoginUserInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getRouters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 路由信息 */
        get: operations["MainController_getRouters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getDicts/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 根据类型获取字典定义 */
        get: operations["MainController_getDicts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitor/cache": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 缓存监控信息 */
        get: operations["CacheController_getInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitor/cache/getNames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 缓存列表 */
        get: operations["CacheController_getNames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitor/cache/getKeys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 键名列表 */
        get: operations["CacheController_getKeys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitor/cache/getValue/{cacheName}/{cacheKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 缓存内容 */
        get: operations["CacheController_getValue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitor/cache/clearCacheName/{cacheName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 清理缓存名称 */
        get: operations["CacheController_clearCacheName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitor/cache/clearCacheKey/{cacheKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 清理缓存键名 */
        get: operations["CacheController_clearCacheKey"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitor/logininfor/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 登录日志-列表 */
        get: operations["LoginlogController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitor/logininfor/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 导出登录日志为xlsx文件 */
        post: operations["LoginlogController_export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitor/server": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 服务器信息 */
        get: operations["ServerController_getInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ResultData: {
            /** @default 200 */
            code: number;
            /** @default 操作成功 */
            msg: string;
        };
        CreateTaskDto: {
            taskName: string;
            payload: string;
            taskType: string;
            /** Format: date-time */
            executeAt: string;
            cronExpression?: string;
        };
        CreatePushTaskDto: {
            pushtaskName: string;
            acceptEmail: string;
            pushTitle: string;
            pushContent: string;
            pushModel: string;
            pushInterval: string;
            status: string;
            startDate?: string;
            /** Format: date-time */
            pushTime?: string;
            remark?: string;
        };
        PushTaskVO: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /**
             * @description 任务ID
             * @example 1
             */
            pushtaskId: number;
            /**
             * @description 任务名称
             * @example 每日新闻推送
             */
            pushtaskName: string;
            /**
             * @description 接受邮箱
             * @example example@example.com
             */
            acceptEmail: string;
            /**
             * @description 推送标题
             * @example 今日新闻
             */
            pushTitle: string;
            /**
             * @description 推送内容
             * @example 这是今天的新闻内容...
             */
            pushContent: string;
            /**
             * @description 推送类型
             * @example 1
             * @enum {string}
             */
            pushModel: "1" | "2";
            /**
             * @description 定期推送间隔
             * @example 1
             * @enum {string}
             */
            pushInterval: "1" | "2" | "3";
            /**
             * @description 定期推送时间
             * @example 09:00
             */
            startDate: string;
            /**
             * Format: date-time
             * @description 按时推送时间
             * @example 2023-04-01T09:00:00Z
             */
            pushTime: string;
            /**
             * @description 备注
             * @example 这是关于新闻推送的备注信息
             */
            remark: string;
        };
        ChangeStatusDto: {
            status: string;
            /** @description 角色ID */
            roleId: number;
        };
        AeraVO: {
            /** @description 名称 */
            name: string;
            /** @description 区code */
            code: string;
            /** @description 省code */
            provinceCode: string;
            /** @description 市code */
            cityCode: string;
        };
        AeraTreeVO: {
            /** @description 名称 */
            name: string;
            /** @description code */
            code: string;
            /** @description 父code */
            parentCode: string;
            /** @description children */
            children?: components["schemas"]["AeraTreeVO"][];
        };
        FileUploadDto: {
            /** Format: binary */
            file: string;
        };
        ChunkMergeFileDto: {
            uploadId: string;
            fileName: string;
        };
        SysDeptVo: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /**
             * @description 部门ID
             * @example 1
             */
            deptId: number;
            /**
             * @description 父部门ID
             * @example 0
             */
            parentId: number;
            /**
             * @description 祖级列表（表示层级关系）
             * @example 0,1,2
             */
            ancestors: string;
            /**
             * @description 部门名称
             * @example 人力资源部
             */
            deptName: string;
            /**
             * @description 显示顺序
             * @example 1
             */
            orderNum: number;
            /**
             * @description 负责人
             * @example 张三
             */
            leader: string;
            /**
             * @description 联系电话
             * @example 13800138000
             */
            phone: string;
            /**
             * @description 邮箱
             * @example zhangsan@example.com
             */
            email: string;
        };
        UserProfileVo: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /**
             * @description 用户ID
             * @example 1
             */
            userId: number;
            /**
             * @description 部门ID
             * @example 101
             */
            deptId: number;
            /**
             * @description 部门信息
             * @example {}
             */
            dept: components["schemas"]["SysDeptVo"];
            /**
             * @description 用户账号
             * @example user123
             */
            userName: string;
            /**
             * @description 用户昵称
             * @example 张三
             */
            nickName: string;
            /**
             * @description 用户类型
             * @example 10
             * @enum {string}
             */
            userType: "00" | "10";
            /**
             * @description 邮箱
             * @example zhangsan@example.com
             */
            email: string;
            /**
             * @description 手机号码
             * @example 13800138000
             */
            phonenumber: string;
            /**
             * @description 性别
             * @example 0
             * @enum {string}
             */
            sex: "0" | "1" | "2";
            /**
             * @description 头像地址
             * @example http://example.com/avatar.jpg
             */
            avatar: string;
            /**
             * @description 最后登录IP
             * @example 192.168.1.1
             */
            loginIp: string;
            /**
             * Format: date-time
             * @description 最后登录时间
             * @example 2023-10-05T14:48:00.000Z
             */
            loginDate: string;
            /**
             * @description 备注
             * @example 这是张三的备注信息
             */
            remark: string;
            /**
             * @description 角色信息
             * @example []
             */
            roles: string[];
            /**
             * @description 岗位信息
             * @example []
             */
            posts: string[];
        };
        UpdateProfileDto: {
            nickName: string;
            sex: string;
            email?: string;
        };
        UpdateAvatarDto: {
            avatar: string;
        };
        UpdatePwdDto: {
            oldPassword: string;
            newPassword: string;
        };
        CreateUserDto: {
            nickName: string;
            userName: string;
            password: string;
            phonenumber: string;
            postIds: string[];
            roleIds: string[];
            userType: string;
            status: string;
            sex: string;
            deptId?: number;
            email?: string;
            remark?: string;
        };
        UserVo: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /**
             * @description 用户ID
             * @example 1
             */
            userId: number;
            /**
             * @description 部门ID
             * @example 101
             */
            deptId: number;
            /**
             * @description 部门信息
             * @example {}
             */
            dept: components["schemas"]["SysDeptVo"];
            /**
             * @description 用户账号
             * @example user123
             */
            userName: string;
            /**
             * @description 用户昵称
             * @example 张三
             */
            nickName: string;
            /**
             * @description 用户类型
             * @example 10
             * @enum {string}
             */
            userType: "00" | "10";
            /**
             * @description 邮箱
             * @example zhangsan@example.com
             */
            email: string;
            /**
             * @description 手机号码
             * @example 13800138000
             */
            phonenumber: string;
            /**
             * @description 性别
             * @example 0
             * @enum {string}
             */
            sex: "0" | "1" | "2";
            /**
             * @description 头像地址
             * @example http://example.com/avatar.jpg
             */
            avatar: string;
            /**
             * @description 最后登录IP
             * @example 192.168.1.1
             */
            loginIp: string;
            /**
             * Format: date-time
             * @description 最后登录时间
             * @example 2023-10-05T14:48:00.000Z
             */
            loginDate: string;
            /**
             * @description 备注
             * @example 这是张三的备注信息
             */
            remark: string;
        };
        UserInfoVo: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /**
             * @description 用户ID
             * @example 1
             */
            userId: number;
            /**
             * @description 部门ID
             * @example 101
             */
            deptId: number;
            /**
             * @description 部门信息
             * @example {}
             */
            dept: components["schemas"]["SysDeptVo"];
            /**
             * @description 用户账号
             * @example user123
             */
            userName: string;
            /**
             * @description 用户昵称
             * @example 张三
             */
            nickName: string;
            /**
             * @description 用户类型
             * @example 10
             * @enum {string}
             */
            userType: "00" | "10";
            /**
             * @description 邮箱
             * @example zhangsan@example.com
             */
            email: string;
            /**
             * @description 手机号码
             * @example 13800138000
             */
            phonenumber: string;
            /**
             * @description 性别
             * @example 0
             * @enum {string}
             */
            sex: "0" | "1" | "2";
            /**
             * @description 头像地址
             * @example http://example.com/avatar.jpg
             */
            avatar: string;
            /**
             * @description 最后登录IP
             * @example 192.168.1.1
             */
            loginIp: string;
            /**
             * Format: date-time
             * @description 最后登录时间
             * @example 2023-10-05T14:48:00.000Z
             */
            loginDate: string;
            /**
             * @description 备注
             * @example 这是张三的备注信息
             */
            remark: string;
            /**
             * @description 角色信息ids
             * @example []
             */
            roleIds: string[];
            /**
             * @description 岗位信息ids
             * @example []
             */
            postIds: string[];
        };
        UpdateUserDto: {
            nickName: string;
            postIds: string[];
            roleIds: string[];
            userType: string;
            status: string;
            sex: string;
            deptId?: number;
            email?: string;
            remark?: string;
            userId: number;
        };
        ResetPwdDto: {
            userId: number;
            password: string;
        };
        ListUserDto: {
            pageNum?: number;
            pageSize?: number;
            beginTime?: string;
            endTime?: string;
            orderByColumn?: string;
            order?: string;
            deptId?: number;
            nickName?: string;
            email?: string;
            userName?: string;
            phonenumber?: string;
            status?: string;
        };
        CreateDeptDto: {
            parentId: number;
            deptName: string;
            orderNum: number;
            leader: string;
            status: string;
            phone?: string;
            email?: string;
        };
        DeptTreeVo: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /**
             * @description 部门ID
             * @example 1
             */
            deptId: number;
            /**
             * @description 父部门ID
             * @example 0
             */
            parentId: number;
            /**
             * @description 祖级列表（表示层级关系）
             * @example 0,1,2
             */
            ancestors: string;
            /**
             * @description 部门名称
             * @example 人力资源部
             */
            deptName: string;
            /**
             * @description 显示顺序
             * @example 1
             */
            orderNum: number;
            /**
             * @description 负责人
             * @example 张三
             */
            leader: string;
            /**
             * @description 联系电话
             * @example 13800138000
             */
            phone: string;
            /**
             * @description 邮箱
             * @example zhangsan@example.com
             */
            email: string;
            /**
             * @description 子级列表
             * @example []
             */
            children: string[];
        };
        RoleDeptTreeSelectVo: {
            /**
             * @description 部门树
             * @example []
             */
            depts: string[];
            /**
             * @description 角色已绑定部门ids
             * @example []
             */
            checkedIds: string[];
        };
        UpdateDeptDto: {
            parentId: number;
            deptName: string;
            orderNum: number;
            leader: string;
            status: string;
            phone?: string;
            email?: string;
            deptId: number;
        };
        CreateMenuDto: {
            menuName: string;
            parentId: number;
            orderNum: number;
            path: string;
            component: string;
            name: string;
            activeMenu: string;
            isCache: string;
            isFrame: string;
            perm: string;
            menuType: string;
            status: string;
            visible: string;
            icon?: string;
        };
        MenuTreeVo: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /** @description 菜单ID */
            menuId: number;
            /** @description 菜单名称 */
            menuName: string;
            /** @description 父菜单ID */
            parentId: number;
            /**
             * @description 祖级列表（表示层级关系）
             * @example 0,1,2
             */
            ancestors: string;
            /** @description 显示顺序 */
            orderNum: number;
            /** @description 路由地址 */
            path: string;
            /** @description 组件路径 */
            component: string;
            /** @description 组件name */
            name: string;
            /** @description 高亮菜单 */
            activeMenu: string;
            /**
             * @description 是否为外链
             * @enum {string}
             */
            isFrame: "0" | "1";
            /**
             * @description 是否缓存
             * @enum {string}
             */
            isCache: "0" | "1";
            /**
             * @description 是否显示
             * @enum {string}
             */
            visible: "0" | "1";
            /** @description 菜单图标 */
            icon: string;
            /** @description 功能权限标识 */
            perm: string;
            /**
             * @description 菜单类型（M菜单 F按钮）
             * @enum {string}
             */
            menuType: "M" | "F";
            /**
             * @description 子级列表
             * @example []
             */
            children: string[];
        };
        RoleMenuTreeSelect: {
            /**
             * @description 菜单树
             * @example []
             */
            menus: string[];
            /**
             * @description 角色已绑定菜单ids
             * @example []
             */
            checkedIds: string[];
        };
        SysMenuVo: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /** @description 菜单ID */
            menuId: number;
            /** @description 菜单名称 */
            menuName: string;
            /** @description 父菜单ID */
            parentId: number;
            /**
             * @description 祖级列表（表示层级关系）
             * @example 0,1,2
             */
            ancestors: string;
            /** @description 显示顺序 */
            orderNum: number;
            /** @description 路由地址 */
            path: string;
            /** @description 组件路径 */
            component: string;
            /** @description 组件name */
            name: string;
            /** @description 高亮菜单 */
            activeMenu: string;
            /**
             * @description 是否为外链
             * @enum {string}
             */
            isFrame: "0" | "1";
            /**
             * @description 是否缓存
             * @enum {string}
             */
            isCache: "0" | "1";
            /**
             * @description 是否显示
             * @enum {string}
             */
            visible: "0" | "1";
            /** @description 菜单图标 */
            icon: string;
            /** @description 功能权限标识 */
            perm: string;
            /**
             * @description 菜单类型（M菜单 F按钮）
             * @enum {string}
             */
            menuType: "M" | "F";
        };
        UpdateMenuDto: {
            menuName: string;
            parentId: number;
            orderNum: number;
            path: string;
            component: string;
            name: string;
            activeMenu: string;
            isCache: string;
            isFrame: string;
            perm: string;
            menuType: string;
            status: string;
            visible: string;
            icon?: string;
            menuId: number;
        };
        CreateRoleDto: {
            roleName: string;
            roleKey: string;
            roleSort: number;
            menuIds: string[];
            deptIds: string[];
            status: string;
            dataScope: string;
            remark?: string;
        };
        SysRoleVo: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /**
             * @description 角色ID
             * @example 1
             */
            roleId: number;
            /**
             * @description 角色名称
             * @example Administrator
             */
            roleName: string;
            /**
             * @description 显示顺序
             * @example 0
             */
            roleSort: number;
            /**
             * @description 角色权限字符串
             * @example ROLE_ADMIN
             */
            roleKey: string;
            /**
             * @description 数据范围 (1: 全部数据权限, 2: 自定数据权限, 3: 本部门数据权限, 4: 本部门及以下数据权限, 5: 仅本人数据权限)
             * @example 1
             * @enum {string}
             */
            dataScope: "1" | "2" | "3" | "4" | "5";
            /**
             * @description 备注
             * @example 这是管理员角色的备注
             */
            remark: string;
        };
        UpdateRoleDto: {
            roleName: string;
            roleKey: string;
            roleSort: number;
            menuIds: string[];
            deptIds: string[];
            status: string;
            dataScope: string;
            remark?: string;
            /** @description 角色ID */
            roleId: number;
        };
        ListRoleDto: {
            pageNum?: number;
            pageSize?: number;
            beginTime?: string;
            endTime?: string;
            orderByColumn?: string;
            order?: string;
            roleName?: string;
            roleKey?: string;
            status?: string;
        };
        CreatePostDto: {
            postName: string;
            postCode: string;
            status: string;
            postSort: number;
            remark?: string;
        };
        SysPostVo: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /**
             * @description 岗位ID
             * @example 1
             */
            postId: number;
            /**
             * @description 岗位编码
             * @example PC001
             */
            postCode: string;
            /**
             * @description 岗位名称
             * @example 项目经理
             */
            postName: string;
            /**
             * @description 显示顺序
             * @example 1
             */
            postSort: number;
            /**
             * @description 备注
             * @example ll-admin项目经理
             */
            remark: string;
        };
        UpdatePostDto: {
            postName: string;
            postCode: string;
            status: string;
            postSort: number;
            remark?: string;
            postId: number;
        };
        ListPostDto: {
            pageNum?: number;
            pageSize?: number;
            beginTime?: string;
            endTime?: string;
            orderByColumn?: string;
            order?: string;
            postName?: string;
            postCode?: string;
            status?: string;
        };
        CreateConfigDto: {
            configName: string;
            configValue: string;
            configKey: string;
            configType: string;
            remark?: string;
        };
        SysConfigVo: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /** @description 参数主键 */
            configId: number;
            /** @description 参数名称 */
            configName: string;
            /** @description 参数键 */
            configKey: string;
            /** @description 参数键值 */
            configValue: string;
            /**
             * @description 系统内置
             * @enum {string}
             */
            configType: "0" | "1";
            /** @description 备注 */
            remark: string;
        };
        ListConfigDto: {
            pageNum?: number;
            pageSize?: number;
            beginTime?: string;
            endTime?: string;
            orderByColumn?: string;
            order?: string;
            configName?: string;
            configKey?: string;
            configType?: string;
        };
        UpdateConfigDto: {
            configName: string;
            configValue: string;
            configKey: string;
            configType: string;
            remark?: string;
            configId: number;
        };
        CreateNoticeDto: {
            noticeTitle: string;
            noticeType: string;
            noticeContent: string;
            status: string;
        };
        SysNoticeVO: {
            /**
             * @description 状态
             * @example 0
             * @enum {string}
             */
            status: "0" | "1";
            /**
             * @description 删除标志
             * @example 0
             * @enum {string}
             */
            delFlag: "0" | "1";
            /**
             * @description 创建者
             * @example 1
             */
            createBy: number;
            /**
             * Format: date-time
             * @description 创建时间
             * @example 2021-01-01T13:14:00.000Z
             */
            createTime: string;
            /**
             * @description 更新者
             * @example 1
             */
            updateBy: number;
            /**
             * Format: date-time
             * @description 更新时间
             * @example 2021-01-01T13:14:00.000Z
             */
            updateTime: string;
            /**
             * @description 公告ID
             * @example 1
             */
            noticeId: number;
            /**
             * @description 公告标题
             * @example 系统维护通知
             */
            noticeTitle: string;
            /**
             * @description 公告类型（1为通知，2为公告）
             * @example 1
             * @enum {string}
             */
            noticeType: "1" | "2";
            /**
             * @description 公告内容
             * @example 系统将于今晚进行维护，请提前保存工作。
             */
            noticeContent: string;
        };
        ListNoticeDto: {
            pageNum?: number;
            pageSize?: number;
            beginTime?: string;
            endTime?: string;
            orderByColumn?: string;
            order?: string;
            noticeTitle?: string;
            noticeType?: string;
            createBy?: number;
        };
        UpdateNoticeDto: {
            noticeTitle: string;
            noticeType: string;
            noticeContent: string;
            status: string;
            noticeId: number;
        };
        TokenVo: {
            /** @description token */
            token: string;
        };
        LoginDto: {
            userName: string;
            password: string;
            code?: string;
            uuid?: string;
        };
        RegisterDto: {
            userName: string;
            password: string;
        };
        CaptchaImageVo: {
            /** @description 是否开启验证码 */
            captchaEnabled: boolean;
            /** @description 验证码 */
            img: string;
            /** @description 验证码唯一标识 */
            uuid: string;
        };
        RouteMeta: {
            /** @description 菜单名称 */
            title: string;
            /** @description 菜单图标 */
            icon: string;
            /** @description 当路由设置了该属性，则会高亮相对应的侧边栏 */
            activeMenu: string;
            /** @description 是否忽略KeepAlive缓存 */
            noCache: boolean;
            /** @description 是否外链 */
            link: string;
            /** @description 页面功能权限 */
            perms: string[];
        };
        RoutersVo: {
            /** @description 路由地址 */
            path: string;
            /** @description 路由名字（必须保持唯一） */
            name: string;
            /** @description 是否隐藏该菜单 */
            hidden: boolean;
            /** @description 路由元信息 */
            meta: components["schemas"]["RouteMeta"];
            /** @description 路由重定向  当设置 noRedirect 的时候该路由在面包屑导航中不可被点击 */
            redirect: string;
            /** @description 按需加载需要展示的页面 */
            component: string;
            /** @description 子路由配置项 */
            children: components["schemas"]["RoutersVo"][];
        };
        DictVo: {
            /** @description 字典值 */
            dictValue: string;
            /** @description 字典名称 */
            dictLabel: string;
        };
        ListLoginlogDto: {
            pageNum?: number;
            pageSize?: number;
            beginTime?: string;
            endTime?: string;
            orderByColumn?: string;
            order?: string;
            ipaddr?: string;
            userName?: string;
            status?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    TaskController_createTask: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaskDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    TaskController_cancelTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    PushTaskController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePushTaskDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    PushTaskController_findAll: {
        parameters: {
            query?: {
                pageNum?: number;
                pageSize?: number;
                beginTime?: string;
                endTime?: string;
                orderByColumn?: string;
                order?: string;
                pushtaskName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: {
                            list?: components["schemas"]["PushTaskVO"][];
                            /** @default 0 */
                            total: number;
                        };
                    };
                };
            };
        };
    };
    PushTaskController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["PushTaskVO"];
                    };
                };
            };
        };
    };
    PushTaskController_switchStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangeStatusDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    PushTaskController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ids: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    AreaController_findAllChildrenByCode: {
        parameters: {
            query: {
                /** @description code */
                code: string;
                /** @description level */
                level: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["AeraVO"][];
                    };
                };
            };
        };
    };
    AreaController_findTrees: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["AeraTreeVO"][];
                    };
                };
            };
        };
    };
    UploadController_singleFileUpload: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["FileUploadDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_getChunkUploadId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_chunkFileUpload: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_chunkMergeFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChunkMergeFileDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_getChunkUploadResult: {
        parameters: {
            query: {
                uploadId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_getAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["UserProfileVo"];
                    };
                };
            };
        };
    };
    UserController_updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    UserController_updateAvatar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAvatarDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    UserController_updatePwd: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePwdDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    UserController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    UserController_findAll: {
        parameters: {
            query?: {
                pageNum?: number;
                pageSize?: number;
                beginTime?: string;
                endTime?: string;
                orderByColumn?: string;
                order?: string;
                deptId?: number;
                nickName?: string;
                email?: string;
                userName?: string;
                phonenumber?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: {
                            list?: components["schemas"]["UserVo"][];
                            /** @default 0 */
                            total: number;
                        };
                    };
                };
            };
        };
    };
    UserController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["UserInfoVo"];
                    };
                };
            };
        };
    };
    UserController_changeStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangeStatusDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    UserController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    UserController_resetPwd: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPwdDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    UserController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    UserController_export: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListUserDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DeptController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDeptDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    DeptController_treeSelect: {
        parameters: {
            query?: {
                deptName?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["DeptTreeVo"][];
                    };
                };
            };
        };
    };
    DeptController_roleDeptTreeSelect: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["RoleDeptTreeSelectVo"];
                    };
                };
            };
        };
    };
    DeptController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["SysDeptVo"];
                    };
                };
            };
        };
    };
    DeptController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDeptDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    DeptController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    MenuController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMenuDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    MenuController_treeSelect: {
        parameters: {
            query?: {
                menuName?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["MenuTreeVo"][];
                    };
                };
            };
        };
    };
    MenuController_roleMenuTreeSelect: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                menuId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["RoleMenuTreeSelect"];
                    };
                };
            };
        };
    };
    MenuController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["SysMenuVo"];
                    };
                };
            };
        };
    };
    MenuController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMenuDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    MenuController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    RoleController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoleDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    RoleController_findAll: {
        parameters: {
            query?: {
                pageNum?: number;
                pageSize?: number;
                beginTime?: string;
                endTime?: string;
                orderByColumn?: string;
                order?: string;
                roleName?: string;
                roleKey?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: {
                            list?: components["schemas"]["SysRoleVo"][];
                            /** @default 0 */
                            total: number;
                        };
                    };
                };
            };
        };
    };
    RoleController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["SysRoleVo"];
                    };
                };
            };
        };
    };
    RoleController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRoleDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    RoleController_changeStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangeStatusDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    RoleController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ids: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    RoleController_export: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListRoleDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePostDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    PostController_findAll: {
        parameters: {
            query?: {
                pageNum?: number;
                pageSize?: number;
                beginTime?: string;
                endTime?: string;
                orderByColumn?: string;
                order?: string;
                postName?: string;
                postCode?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: {
                            list?: components["schemas"]["SysPostVo"][];
                            /** @default 0 */
                            total: number;
                        };
                    };
                };
            };
        };
    };
    PostController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["SysPostVo"];
                    };
                };
            };
        };
    };
    PostController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePostDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    PostController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ids: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    PostController_export: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListPostDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConfigController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateConfigDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    ConfigController_findAll: {
        parameters: {
            query?: {
                pageNum?: number;
                pageSize?: number;
                beginTime?: string;
                endTime?: string;
                orderByColumn?: string;
                order?: string;
                configName?: string;
                configKey?: string;
                configType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListConfigDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: {
                            list?: components["schemas"]["SysConfigVo"][];
                            /** @default 0 */
                            total: number;
                        };
                    };
                };
            };
        };
    };
    ConfigController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["SysConfigVo"];
                    };
                };
            };
        };
    };
    ConfigController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateConfigDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    ConfigController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    ConfigController_export: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListConfigDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NoticeController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateNoticeDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    NoticeController_findAll: {
        parameters: {
            query?: {
                pageNum?: number;
                pageSize?: number;
                beginTime?: string;
                endTime?: string;
                orderByColumn?: string;
                order?: string;
                noticeTitle?: string;
                noticeType?: string;
                createBy?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListNoticeDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: {
                            list?: components["schemas"]["SysNoticeVO"][];
                            /** @default 0 */
                            total: number;
                        };
                    };
                };
            };
        };
    };
    NoticeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["SysNoticeVO"];
                    };
                };
            };
        };
    };
    NoticeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateNoticeDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    NoticeController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ids: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    MainController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["TokenVo"];
                    };
                };
            };
        };
    };
    MainController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    MainController_captchaImage: {
        parameters: {
            query: {
                uuid: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["CaptchaImageVo"];
                    };
                };
            };
        };
    };
    MainController_getLoginUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["UserVo"];
                    };
                };
            };
        };
    };
    MainController_getRouters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["RoutersVo"][];
                    };
                };
            };
        };
    };
    MainController_getDicts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        data?: components["schemas"]["DictVo"][];
                    };
                };
            };
        };
    };
    CacheController_getInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CacheController_getNames: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CacheController_getKeys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CacheController_getValue: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CacheController_clearCacheName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cacheName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CacheController_clearCacheKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cacheKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LoginlogController_findAll: {
        parameters: {
            query?: {
                pageNum?: number;
                pageSize?: number;
                beginTime?: string;
                endTime?: string;
                orderByColumn?: string;
                order?: string;
                ipaddr?: string;
                userName?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultData"] & {
                        /** @default null */
                        data: null;
                    };
                };
            };
        };
    };
    LoginlogController_export: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListLoginlogDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServerController_getInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
